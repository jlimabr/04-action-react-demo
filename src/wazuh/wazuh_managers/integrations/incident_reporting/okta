# from importlib.util import spec_from_loader, module_from_spec
# from importlib.machinery import SourceFileLoader 
# from dateutil import tz

# import requests
# import json
# import datetime
# import pytz
# import os
# import re

# spec = spec_from_loader("slack_issues", SourceFileLoader("slack_issues", "/var/ossec/integrations/incident_reporting/jira"))
# slack_issues = module_from_spec(spec)
# spec.loader.exec_module(slack_issues)

# from_zone = tz.gettz('UTC')
# to_zone = tz.gettz('Europe/Lisbon')

# def parse(log):
#     source = "Crowdstrike"
#     siem_id = log['id']
#     village = 'Cyber Defense'
#     team = 'Cyber Defense'
#     device = log['device']
#     behaviors = log['behaviors'][0]
#     technique = behaviors['technique']
#     description = ''
#     description += f"*Summary:* EDR Plataform (Crowdstrike) detected a {behaviors['tactic']} ({behaviors['display_name']})"
#     description += f" on the machine with hostname {device['hostname']}.\n"
#     description += f'*Log Source:* ' + source + '\n'
#     description += f"*SIEM ID/s:* " + siem_id + '\n'
#     # Convert timestamps to GMT+0
#     first_seen = datetime.datetime.fromisoformat(device['first_seen']).astimezone(pytz.timezone('Etc/GMT'))
#     created_timestamp = datetime.datetime.fromisoformat(log['created_timestamp']).astimezone(pytz.timezone('Etc/GMT'))
#     last_seen = datetime.datetime.fromisoformat(device['last_seen']).astimezone(pytz.timezone('Etc/GMT'))
#     description += f"*First seen:* {first_seen.isoformat()}\n"
#     description += f"*First detected:* {created_timestamp.isoformat()}\n"
#     description += f"*Last seen:* {last_seen.isoformat()}\n\n"
#     description += f"*Target/s:* Hostname: {device['hostname']}\n"
#     description += f"*Threat Actor/s:*\n"
#     description += f"*Pre-analysis:* {behaviors['description']}\n"
#     device = log['device']
#     behaviors = log['behaviors'][0]
#     title = f"General | Live | CrowdStrike Falcon | {behaviors['technique']}\n" 
    
#     issue_key = slack_issues.create_issue(siem_id, title, village, team, description)

#     if issue_key is None:
#         update_response = 'Failed to create issue.*'
#     else:
#         update_response = '*Issue created:* https://jira.jumia.com/browse/' + issue_key

#     description += update_response

#     return description